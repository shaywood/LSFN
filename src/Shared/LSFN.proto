message IS {
    // From Interface to Ship
    
    enum Handshake {
        HELLO = 0;
        GOODBYE = 1;
    }
    
    message SHIP_ENV_command {
        enum Type {
            CONNECT = 0;
            DISCONNECT = 1;
            RECONNECT = 2; // Disconnect first then reconnect using the given details
        }
        required Type type = 1;
        optional string host = 2;
        optional int32 port = 3;
    }
    
    message Subscribe {
        repeated int32 subscription_IDs = 1;
    }
    
    message Subscription_input_updates {
        message Subscription_update {
            required int32 subscription_ID = 1;
            optional float float_value = 2;
            optional double double_value = 3;
            optional int32 int32_value = 4;
            optional int64 int64_value = 5;
            optional string string_value = 15;
        }
        repeated Subscription_update updates = 1;
    }
    
    optional Handshake handshake = 16;
    optional SHIP_ENV_command command = 17;
    optional Subscribe subscribe = 18;
    optional Subscription_input_updates input_updates = 19;
}

message SI {
    // From Ship to Interface
    
    message Handshake {
        // This is a response to the same named message in the IS protocol.
        enum Type {
            HELLO = 0;
            GOODBYE = 1;
        }
        required Type type = 1;
        optional int32 player_ID = 2; // If HELLO then we send the player their ID (unique on the SHIP) as well.
    }
    
    message SHIP_ENV_status {
        // This is a response to the SHIP_ENV_command message in the IS protocol and is given when an INT connects.
        enum State {
            DISCONNECTED = 0;
            CONNECTED = 1;
        }
        required State state = 1;
        optional int32 ship_ID = 2;
    }
    
    message Ship_positions {
        message Ship_position {
            required int32 ship_ID = 1;
            repeated double coordinates = 2; // Notice how this allows N dimensions: format is [X, Y, Z]
        }
        repeated Ship_position positions = 1;
    }
    
    message Subscriptions_available {
        message Value_details {
            enum Value_type {
                FLOAT = 0;
                DOUBLE = 1;
                INT32 = 2;
                INT64 = 3;
                STRING = 13;
            }
            required string name = 1;
            required int32 ID = 2;
            required Value_type type = 3;
        }
        repeated Value_details outputs = 1;
        repeated Value_details inputs = 2;
    }
    
    message Subscription_output_updates {
        message Subscription_update {
            required int32 subscription_ID = 1;
            optional float float_value = 2;
            optional double double_value = 3;
            optional int32 int32_value = 4;
            optional int64 int64_value = 5;
            optional string string_value = 15;
        }
        repeated Subscription_update updates = 1;
    }
    
    optional Handshake handshake = 16;
    optional SHIP_ENV_status command = 17;
    optional Ship_positions positions = 18;
    optional Subscriptions_available subscriptions_available = 19;
    optional Subscription_output_updates output_updates = 20;
}

message SE {
    // From Ship to Environment

    enum Handshake {
        HELLO = 0;
        GOODBYE = 1;
    }
    
    message Ship_movement {
        repeated sint32 axis_accel = 1;
    }
    
    optional Handshake handshake = 16;
    optional Ship_movement movement = 17;
}

message ES {
    // from Environment to Ship

    message Handshake {
        // This is a response to the same named message in the IS protocol.
        enum Type {
            HELLO = 0;
            GOODBYE = 1;
        }
        required Type type = 1;
        optional int32 ship_ID = 2; // If HELLO then we send the ship their ID (unique on the ENV) as well.
    }
    
    message Ship_positions {
        message Ship_position {
            required int32 ship_ID = 1;
            repeated double coordinates = 2; // Notice how this allows N dimensions: format is [X, Y, Z]
        }
        repeated Ship_position positions = 1;
    }
    
    optional Handshake handshake = 16;
    optional Ship_positions positions = 17;
}